
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module RockPaperScissor(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N
);

//=======================================================
//  REG/WIRE declarations
//=======================================================
	//switches and buttons needed to play the game
	wire OnOff = SW[0];
	wire R = SW[1];
	wire P = SW[2];
	wire S = SW[3];
	wire L = SW[4];
	wire Sp = SW[5];
	wire restart = ~KEY[1];
	wire clk = MAX10_CLK1_50;

	//wires to update the display
	wire clk100HZ;
	wire [9:0] LED_N;
	wire [7:0] H0;
	wire [7:0] H1;
	wire [7:0] H2;
	wire [7:0] H3;
	wire [7:0] H4;
	wire [7:0] H5;

	//registers to count and keep track of data
	reg [1:0] state_reg;
	reg [2:0] choice;
	reg [7:0] counter;
	reg [7:0] fpgachoice;
	reg [8:0] delay;
	reg [1:0] score;
	reg [3:0] wins;
	reg [3:0] losses;

	//states
	parameter idle = 2'b00;
	parameter pick = 2'b01;
	parameter result = 2'b10;
	parameter display = 2'b11;

	initial begin 
		state_reg = idle;
		choice = 0;
		counter = 0;
		fpgachoice = 0;
		delay = 0;
		wins = 0;
		losses = 0;
	end

//=======================================================
//  Structural coding
//=======================================================
	//update the clock at every positive edge so that the user cannot predict the outcome
	always@(posedge clk100HZ)
		begin
		fpgachoice <= fpgachoice + 1;
		if(fpgachoice == 99)
		fpgachoice <= 0;
		end

	always @(posedge clk100HZ)
		begin//if button press is detected wipe the scoreboard
		if(restart)
		begin
		wins <= 0;
		losses <= 0;
		end
			case (state_reg)//update the users choice and go to pick state
				idle:		if(OnOff & R)
								begin
								state_reg <= pick;
								choice <= 1;
								end
							else if(OnOff & P)
								begin
								state_reg <= pick;
								choice <= 2;
								end
							else if(OnOff & S)
								begin
								state_reg <= pick;
								choice <= 3;
								end
							else if(OnOff & L)
								begin
								state_reg <= pick;
								choice <= 4;
								end
							else if(OnOff & Sp)
								begin
								state_reg <= pick;
								choice <= 5;
								end
							
							else state_reg <= idle;
							
				pick:		if(OnOff & (fpgachoice > 0))//update the score based on what the fpga chose
							begin
								state_reg <= display;
								if(choice == 1 & fpgachoice < 19)//rock vs rock = tie
								begin
								score <= 2;//do nothing to scoreboard
								end
								else if(choice == 2 & fpgachoice < 19) //paper beats rock
								begin
								score <= 1;
								wins <= wins + 1;//update wins
								end
								else if(choice == 3 & fpgachoice < 19)//etc
								begin
								score <= 3;
								losses <= losses + 1;//update losses
								end
								else if(choice == 4 & fpgachoice < 19)//etc
								begin
								score <= 3;
								losses <= losses + 1;
								end
								else if(choice == 5 & fpgachoice < 19)
								begin
								score <= 1;
								wins <= wins +1;
								end
								else if(choice == 1 & fpgachoice < 39)
								begin
								score <= 1;
								losses<=losses+1;
								end
								else if(choice == 2 & fpgachoice < 39)
								begin
								score <= 2;
								end
								else if(choice == 3 & fpgachoice < 39)
								begin
								score <= 1;
								wins<=wins+1;
								end
								else if(choice == 4 & fpgachoice < 39)
								begin
								score <= 1;
								wins<=wins + 1;
								end
								else if(choice == 5 & fpgachoice < 39)
								begin
								score <= 3;
								losses<=losses+1;
								end
								else if(choice == 1 & fpgachoice < 59)
								begin
								score <= 1;
								wins<=wins+1;
								end
								else if(choice == 2 & fpgachoice < 59)
								begin
								score <= 3;
								losses<=losses+1;
								end
								else if(choice == 3 & fpgachoice < 59)
								begin
								score <= 2;
								end
								else if(choice == 4 & fpgachoice < 59)
								begin
								score <= 3;
								losses<=losses + 1;
								end
								else if(choice == 5 & fpgachoice < 59)
								begin
								score <= 1;
								wins<=wins+1;
								end
								else if(choice == 1 & fpgachoice < 79)
								begin
								score <= 1;
								wins<=wins+1;
								end
								else if(choice == 2 & fpgachoice < 79)
								begin
								score <= 3;
								losses<=losses+1;
								end
								else if(choice == 3 & fpgachoice < 79)
								begin
								score <= 1;
								wins<=wins+1;
								end
								else if(choice == 4 & fpgachoice < 79)
								begin
								score <= 2;
								end
								else if(choice == 5 & fpgachoice < 79)
								begin
								score <= 3;
								losses<=losses+1;
								end
								else if(choice == 1 & fpgachoice < 99)
								begin
								score <= 3;
								losses<=losses+1;
								end
								else if(choice == 2 & fpgachoice < 99)
								begin
								score <= 1;
								wins<=wins+1;
								end
								else if(choice == 3 & fpgachoice < 99)
								begin
								score <= 3;
								losses<=losses+1;
								end
								else if(choice == 4 & fpgachoice < 99)
								begin
								score <= 1;
								wins<=wins+1;
								end
								else if(choice == 5 & fpgachoice < 99)
								begin
								score <= 2;
								end
							end
							else								  state_reg <= pick;
				display: if(OnOff & (delay>200))
							begin
							state_reg <= result;
							delay <= 0;//always start ar zero so user can have time to process
							end
							else
							begin
							state_reg <= display;
							delay <= delay +1;//increment counter
							end
				result:	if(!OnOff)
							begin
							score <= 0;//wipe score and start again
							state_reg <= idle;
							end
							else					
							begin
							state_reg <= result;
							counter <= counter + 1;
							if(counter >120)
							counter <= 0;//restart counter 
							end
							
				default:										state_reg <= idle;
			endcase
		end
	
	ClockDivider100 CLK_MUT(clk, clk100HZ);
	
	RockPaperScissorCases Cases_MUT(clk100HZ, state_reg, fpgachoice, LED_N, choice, H0, H1, H2, H3, H4, H5, counter, score, wins,losses);
	
	assign LEDR = LED_N;
	assign HEX0 = ~H0;
	assign HEX1 = ~H1;
	assign HEX2 = ~H2;
	assign HEX3 = ~H3;
	assign HEX4 = ~H4;
	assign HEX5 = ~H5;
	
endmodule
